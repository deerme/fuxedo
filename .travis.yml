language: cpp

matrix:
  include:

    - os: linux
      dist: xenial
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-5.0']
          packages: ['clang-5.0', 'libstdc++-8-dev']
      env: COMPILER='clang++-5.0'


    - os: linux
      dist: xenial
      compiler: clang
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test', 'llvm-toolchain-xenial-6.0']
          packages: ['clang-6.0', 'libstdc++-8-dev']
      env: COMPILER='clang++-6.0'

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7']
      env: COMPILER='g++-7'

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8']
      env: COMPILER='g++-8'

    - os: linux
      compiler: gcc
      addons:
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-8', 'lcov']
      env: COMPILER='g++-8' COVERAGE=1



before_script:
  - export CXX=${COMPILER}
  - ./autogen.sh
  - pip install --user cpp-coveralls

script:
  - # Coverage linking fails with clang
  - |
    if [[ "${COVERAGE}" == "1" ]]; then
    	./configure --prefix=/home/travis/fuxbin --enable-code-coverage CXXFLAGS="-O0 -g"
    else
    	./configure --prefix=/home/travis/fuxbin
    fi
  - make && make check
  - make install && make installcheck

after_success:
  - |
    if [[ "${COVERAGE}" == "1" ]]; then
      lcov --capture --directory . --output-file coverage.info
      lcov --remove coverage.info '/usr/*' '*/tests/*' '*/third_party/*' --output-file coverage.info
      lcov --list coverage.info
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
      coveralls --exclude third_party --exclude tests --gcov-options '\-lp'
    fi
