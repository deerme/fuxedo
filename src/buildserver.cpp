// This file is part of Fuxedo
// Copyright (C) 2017 Aivars Kalvans <aivars.kalvans@gmail.com>

#include <clara.hpp>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>

#include <unistd.h>
#include <cstdio>

#include "build.h"
#include "misc.h"

// The code generated looks crazy at first
// but it matches the one generated by Tuxedo as close as needed to build
// tuxmodule (Python wrapper) and some other code.
static void gencode(
    FILE *fout,
    const std::vector<std::pair<std::string, std::string>> &services,
    bool threads, const std::string &xaswitch) {
  fprintf(fout,
          R"(#include <atmi.h>
#include <stdio.h>
#include <xa.h>

#if defined(__cplusplus)
extern "C" {
#endif
)");

  for (const auto &serviceinfo : services) {
    fprintf(fout, "void %s(TPSVCINFO *);\n", serviceinfo.second.c_str());
  }

  fprintf(fout,
          R"(int _tmrunserver(int);
extern struct xa_switch_t %s;
extern int _tmbuilt_with_thread_option;
#if defined(__cplusplus)
}
#endif

static struct tmdsptchtbl_t _tmdsptchtbl[] = {
)",
          xaswitch.c_str());

  for (const auto &serviceinfo : services) {
    fprintf(fout, "  {\"%s\", \"%s\", %s, 0, 0, NULL},\n",
            serviceinfo.first.c_str(), serviceinfo.second.c_str(),
            serviceinfo.second.c_str());
  }
  fprintf(fout, "  {NULL, NULL, NULL, 0, 0, NULL}\n};\n");

  fprintf(fout,
          R"(static struct tmsvrargs_t tmsvrargs = {
                                       &%s, _tmdsptchtbl,
                                       0,
                                       tpsvrinit, tpsvrdone,
                                       _tmrunserver,
                                       NULL, NULL, NULL, NULL,
                                       tprminit,
                                       tpsvrthrinit, tpsvrthrdone, NULL };

struct tmsvrargs_t *_tmgetsvrargs() {
  return &tmsvrargs;
}

int main(int argc, char **argv) {
)",
          xaswitch.c_str());

  fprintf(fout, "  _tmbuilt_with_thread_option = %d;\n", threads ? 1 : 0);
  fprintf(fout, "  return _tmstartserver(argc, argv, _tmgetsvrargs());\n");
  fprintf(fout, "}\n");
}

static auto parse_services(const std::vector<std::string> &services) {
  std::vector<std::pair<std::string, std::string>> result;
  for (const auto &service : services) {
    auto tmp = fux::split(service, ":");
    if (tmp.size() == 1) {
      result.push_back(std::make_pair(tmp.at(0), tmp.at(0)));
    } else {
      result.push_back(std::make_pair(tmp.at(0), tmp.at(1)));
    }
  }
  return result;
}

int main(int argc, char *argv[]) {
  bool show_help = false;
  bool verbose = false;
  bool keep = false;
  bool threads = false;

  std::string outfile;
  std::string rmname;

  std::vector<std::string> services;
  std::vector<std::string> firstfiles;
  std::vector<std::string> lastfiles;

  auto parser =
      clara::Help(show_help) |
      clara::Opt(verbose)["-v"]("write compilation command to stdout") |
      clara::Opt(keep)["-k"]("keep generated C code") |
      clara::Opt(threads)["-t"]("build multi-threaded server") |
      clara::Opt(firstfiles, "firstfiles")["-f"](
          "compilation parameters to include before Fuxedo libraries") |
      clara::Opt(lastfiles, "lastfiles")["-l"](
          "compilation parameters to include after Fuxedo libraries") |
      clara::Opt(services, "services")["-s"]("service mapping") |
      clara::Opt(rmname, "rmname")["-r"]("resource manager name") |
      clara::Opt(outfile, "outfile")["-o"]("output file name");

  auto result = parser.parse(clara::Args(argc, argv));
  if (!result) {
    std::cerr << parser;
    return -1;
  }
  if (show_help) {
    std::cout << parser;
    return 0;
  }

  auto tuxdir = fux::util::getenv("TUXDIR", "");

  auto rms = parse_rm();
  auto rm = rms.find(rmname);
  if (rm == rms.end() && !rmname.empty()) {
    std::cerr << "Unknown RM name: " << rmname << std::endl;
    return -1;
  }

  auto cc = fux::util::getenv("CC", "cc");
  auto cflags = fux::util::getenv("CFLAGS", "");

  char tmpname[] = "fuxedo-XXXXXX";
  int fd = mkstemp(tmpname);
  FILE *fout = fdopen(fd, "w");

  gencode(fout, parse_services(services), threads,
          rm == rms.end() ? "tmnull_switch" : rm->second.xaswitch);

  fclose(fout);

  std::string filename = std::string(tmpname) + ".c";
  rename(tmpname, filename.c_str());

  std::vector<std::string> cmd;
  cmd.push_back(cc);
  cmd.push_back(filename);
  cmd.push_back(std::string("-I") + tuxdir + "/include");
  cmd.insert(cmd.end(), firstfiles.begin(), firstfiles.end());
  cmd.push_back(std::string("-L") + tuxdir + "/lib");
  cmd.push_back("-lfuxedo");
  cmd.push_back("-lpthread");
  cmd.push_back("-o");
  cmd.push_back(outfile);
  cmd.insert(cmd.end(), lastfiles.begin(), lastfiles.end());

  auto command = join(cmd, " ");

  if (verbose) {
    std::cout << command << std::endl;
  }

  int rc = std::system(command.c_str());
  if (!keep) {
    unlink(filename.c_str());
  }
  return WEXITSTATUS(rc);
}
